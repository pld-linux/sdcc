%define		_snap_date	20090609
%define		_snap_id	5467

Summary:	C compiler for Intel 8051 and Zilog Z80
Summary(pl.UTF-8):	Kompilator C dla Intel 8051 i Zilog Z80
Name:		sdcc
Version:	2.9.1
Release:	0.%{_snap_date}.1
License:	GPL
Group:		Development/Languages
Source0:	http://sdcc.sourceforge.net/snapshots/sdcc-src/%{name}-src-%{_snap_date}-%{_snap_id}.tar.bz2
# Source0-md5:	71479e52e0302d9b01a7fe2a5a27d7c1
Patch0:		%{name}-mcs51-pcall.patch
Patch1:		%{name}-mcs51-stack-probe.patch
Patch2:		%{name}-gstabs.patch
URL:		http://sdcc.sourceforge.net/
BuildRequires:	autoconf
BuildRequires:	automake
BuildRequires:	bison
BuildRequires:	flex
BuildRequires:	gc-devel
BuildRequires:	gputils
BuildRequires:	latex2html
BuildRequires:	libstdc++-devel
BuildRequires:	lyx >= 1.4.4
BuildRequires:	texlive-fonts-cmsuper
BuildRequires:	texlive-fonts-type1-urw
BuildRequires:	texlive-format-pdflatex
BuildRequires:	texlive-latex-ams
BuildRequires:	texlive-makeindex
BuildRequires:	texlive-tex-babel
Obsoletes:	ucsim
BuildRoot:	%{tmpdir}/%{name}-%{version}-root-%(id -u -n)

%define         _noautostrip    .*sdcc.lib.*\\.\\(lib\\|a\\)

%description
SDCC is retargettable, optimizing ANSI - C compiler. The current
version targets the Intel 8051 and recently the Zilog Z80 based MCUs.
SDCC can be retargeted for other 8 bit MCUs or PICs and some day soon
will be. Supported data types are short (8 bits, 1 byte), char (8
bits, 1 byte) , int (16 bits, 2 bytes ), long (32 bit, 4 bytes) and
float (4 byte IEEE). SDCC also comes with the source level debugger
SDCDB.

%description -l pl.UTF-8
SDCC jest kompilatorem ANSI C. Aktualna wersja wspiera procesory Intel
8051 oraz Zilog Z80. SDCC może być łatwo zmodyfikowany by wspierać
inne 8 bitowe jednostki. Wspierane typy danych to short (8 bitów, 1
bajt), char (8 bitów, 1 bajt), int (16 bitów, 2 bajty), long (32 bity,
4 bajty) oraz float (4 bajty IEEE). SDCC dostarcza również debugger
oparty na emulatorze ucsim.

%prep
%setup -qn %{name}
%patch0 -p1
%patch1 -p1
%patch2 -p1

%build
find -type f -name 'configure.??' | while read FILE; do
	cd $(dirname "$FILE")
	%{__autoconf}
	cd -
done

%configure \
	--enable-doc \
	--enable-libgc \
	--enable-ucsim \
	--enable-xa \
	--enable-serio \
	--enable-statistic

%{__make} -j1

cd device/lib
%{__make} model-mcs51-stack-auto
%{__make} model-mcs51-xstack-auto
cd -

%install
rm -rf $RPM_BUILD_ROOT
install -d $RPM_BUILD_ROOT%{_libdir}/emacs/site-lisp

%{__make} install \
	"DESTDIR=$RPM_BUILD_ROOT" \
	"docdir=%{_docdir}/%{name}-%{version}" \
	"STRIP=/bin/true"

# some cleanups in mess generated by make install
#find $RPM_BUILD_ROOT -name "CVS" -type d | xargs rm -r
#mv $RPM_BUILD_ROOT%{_bindir}/*.el $RPM_BUILD_ROOT%{_libdir}/emacs/site-lisp

%clean
rm -rf $RPM_BUILD_ROOT

%files
%defattr(644,root,root,755)
%doc %{_docdir}/%{name}-%{version}
%attr(755,root,root) %{_bindir}/*
%{_datadir}/%{name}
#%{_libdir}/emacs/site-lisp/*.el
